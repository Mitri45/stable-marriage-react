{"version":3,"sources":["img/reorder.svg","img/userAvatar.png","utils/submitResults.js","components/RankingList.js","utils/authenticateUser.js","components/UserVerification.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","submitResult","rankedList","currentUser","a","parsedRankedList","forEach","el","push","rankingResults","email","axios","post","response","status","Container","styled","div","StyledHeader","h1","CardsWrapper","ReactSortable","UserCard","StyledImg","img","UserName","h2","Hamburger","UserRating","RankingList","JSON","parse","localStorage","getItem","useState","localData","state","setState","submitHandler","alert","name","role","tag","list","setList","onSort","sortUserDataToStore","surname","photo","setItem","stringify","animation","easing","map","item","index","key","className","length","src","userAvatar","alt","reorderImg","type","style","display","margin","padding","onClick","to","removeItem","authenticateUser","userEmail","get","params","data","UserVerification","setUserEmail","history","useHistory","handleSubmit","e","preventDefault","processedEmail","trim","toLocaleLowerCase","validUser","rankingList","id","document","getElementById","innerText","onSubmit","required","value","onChange","target","fontSize","marginTop","marginLeft","fontStyle","App","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.59c4c44a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/reorder.eaa32adc.svg\";","module.exports = __webpack_public_path__ + \"static/media/userAvatar.330f6514.png\";","import axios from \"axios\";\r\n\r\nexport async function submitResult(rankedList, currentUser) {\r\n  const parsedRankedList = [];\r\n  rankedList.forEach((el) => {\r\n    parsedRankedList.push(el[\"email\"]);\r\n  });\r\n  const rankingResults = [currentUser.email, parsedRankedList];\r\n  try {\r\n    const response = await axios.post(\"/ranking\", rankingResults);\r\n    return response.status;\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n}\r\n","import React, { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport reorderImg from \"../img/reorder.svg\";\r\nimport userAvatar from \"../img/userAvatar.png\";\r\nimport { submitResult } from \"../utils/submitResults\";\r\nimport { ReactSortable } from \"react-sortablejs\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\n// Styles section with styled-components library (initial adaptation for mobile)\r\n\r\nconst Container = styled.div`\r\n  max-width: 500px;\r\n  margin: 1em auto;\r\n`;\r\nconst StyledHeader = styled.h1`\r\n  text-align: center;\r\n  font-size: 1.5rem;\r\n`;\r\nconst CardsWrapper = styled(ReactSortable)`\r\n  display: flex;\r\n  flex-flow: column nowrap;\r\n  width: 90%;\r\n  margin: 0 auto;\r\n`;\r\nconst UserCard = styled.div`\r\n  max-height: 100px;\r\n  min-width: 360px;\r\n  border: 1px solid #eeeeee;\r\n  box-shadow: 4px 3px 3px 0px rgb(28 27 33 / 55%);\r\n  display: flex;\r\n  flex-flow: row nowrap;\r\n  justify-content: space-around;\r\n  align-items: center;\r\n  margin-bottom: 1em;\r\n  padding: 1em 0;\r\n  background-color: white;\r\n\r\n  &.sortable-swap-highlight {\r\n    background-color: #f9c7c8;\r\n  }\r\n\r\n  &:hover {\r\n    cursor: move;\r\n    cursor: -webkit-grabbing;\r\n  }\r\n`;\r\nconst StyledImg = styled.img`\r\n  width: 90px;\r\n  height: 90px;\r\n  border-radius: 50%;\r\n  flex: 0 0 auto;\r\n  border: solid 1px #cec4c4;\r\n`;\r\nconst UserName = styled.h2`\r\n  max-width: 150px;\r\n  flex: 1 1 auto;\r\n  font-size: 1.2rem;\r\n  margin: 0 1em;\r\n  overflow-wrap: break-word;\r\n  hyphens: auto;\r\n`;\r\nconst Hamburger = styled.img`\r\n  max-width: 50px;\r\n  min-width: 25px;\r\n  height: 100%;\r\n`;\r\nconst UserRating = styled.div`\r\n  flex: 0 1 auto;\r\n  margin: 0 1em;\r\n\r\n  & p {\r\n    font-size: 1.5em;\r\n    color: red;\r\n  }\r\n`;\r\n\r\n// User list component accept location object with state info about current user and data from GraphQL query\r\nexport default function RankingList() {\r\n  let currentUser = JSON.parse(localStorage.getItem(\"validUser\"));\r\n\r\n  // Make this function stateful with React useState hook\r\n  // If current user already have changed something in ranking list this info should be\r\n  // in local storage. So we take it and make it our initial state by converting it to the object,\r\n  // otherwise use data from GraphQL initial query\r\n  const [state, setState] = useState(() => {\r\n    const localData = localStorage.getItem(\"rankingList\");\r\n    return JSON.parse(localData);\r\n  });\r\n  // Every time moving/dragging triggered in the list - save current order to local storage\r\n  const sortEvent = (el) => {\r\n    let sortUserDataToStore = [];\r\n    state.forEach((el) => {\r\n      sortUserDataToStore.push({\r\n        name: el.name,\r\n        surname: el.surname,\r\n        photo: el.photo,\r\n        email: el.email,\r\n      });\r\n    });\r\n    localStorage.setItem(\"rankingList\", JSON.stringify(sortUserDataToStore));\r\n  };\r\n\r\n  // When we going back to first screen delete all data in local storage to prevent redirect\r\n  const wipeCurrentUserDetails = () => {\r\n    localStorage.removeItem(\"validUser\");\r\n    localStorage.removeItem(\"rankingList\");\r\n  };\r\n\r\n  // TODO - organizing and submitting results of raking to somewhere\r\n  const submitHandler = async () => {\r\n    const submitted = await submitResult(state, currentUser);\r\n    if (submitted === 200) {\r\n      alert(\"200\");\r\n    }\r\n  };\r\n  return (\r\n    <Container>\r\n      <StyledHeader>\r\n        {`Hi, ${currentUser.name}! Please rate this  \r\n        ${currentUser.role === \"mentor\" ? \"mentees\" : \"mentors\"}:`}\r\n      </StyledHeader>\r\n      <CardsWrapper\r\n        tag=\"div\"\r\n        list={state}\r\n        setList={setState}\r\n        onSort={sortEvent}\r\n        animation={200}\r\n        easing=\"cubic-bezier(1, 0, 0, 1)\"\r\n      >\r\n        {state.map((item, index) => (\r\n          <UserCard key={item.email}>\r\n            <UserRating>\r\n              <p className=\"user-rating\">{index + 1}</p>\r\n            </UserRating>\r\n            {item.photo.length === 0 ? (\r\n              <StyledImg src={userAvatar} alt=\"User avatar\" />\r\n            ) : (\r\n              <StyledImg src={item.photo} alt=\"User avatar\" />\r\n            )}\r\n            <UserName>{`${item.name} ${item.surname}`}</UserName>\r\n            <Hamburger src={reorderImg} alt=\"reorderList\" />\r\n          </UserCard>\r\n        ))}\r\n      </CardsWrapper>\r\n\r\n      <button\r\n        type=\"button\"\r\n        style={{ display: \"block\", margin: \"1em 0\", padding: \"1em\" }}\r\n        onClick={submitHandler}\r\n      >\r\n        Submit ranking results\r\n      </button>\r\n      <Link to=\"/\" onClick={wipeCurrentUserDetails}>\r\n        Choose another account\r\n      </Link>\r\n    </Container>\r\n  );\r\n}\r\n","import axios from \"axios\";\r\n\r\n// Want to use async/await? Add the `async` keyword to your outer function/method.\r\nexport async function authenticateUser(userEmail) {\r\n  try {\r\n    const response = await axios.get(\"/user\", {\r\n      params: {\r\n        email: userEmail,\r\n      },\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { authenticateUser } from \"../utils/authenticateUser\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst UserVerification = () => {\r\n  const [userEmail, setUserEmail] = useState(\"\");\r\n  const history = useHistory();\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    const processedEmail = userEmail.trim().toLocaleLowerCase();\r\n    const validUser = await authenticateUser(processedEmail);\r\n    if (validUser) {\r\n      localStorage.setItem(\"validUser\", JSON.stringify(validUser[0]));\r\n      const rankingList = [];\r\n      validUser[1].forEach((el) => {\r\n        rankingList.push({\r\n          id: el[\"Order ID\"],\r\n          name: el[\"First Name\"],\r\n          surname: el[\"Last Name\"],\r\n          photo: el[\"A recent photo of yourself\"],\r\n          email: el[\"Email\"],\r\n        });\r\n      });\r\n      localStorage.setItem(\"rankingList\", JSON.stringify(rankingList));\r\n      history.push(\"/ranking\");\r\n    } else {\r\n      const userNotFound = document.getElementById(\"userNotFound\");\r\n      userNotFound.innerText = \"Please, check the spelling and try once again\";\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"App\">\r\n      <form onSubmit={handleSubmit}>\r\n        <label>\r\n          Please identify yourself with your email address, that you used for\r\n          register to this event: <br />\r\n          <input\r\n            name=\"email\"\r\n            type=\"email\"\r\n            id=\"email\"\r\n            required\r\n            value={userEmail}\r\n            onChange={(e) => setUserEmail(e.target.value)}\r\n            style={{ fontSize: \"1.3rem\", padding: \"1rem\", marginTop: \"1rem\" }}\r\n          />\r\n        </label>\r\n        <button type=\"submit\" style={{ fontSize: \"1.3rem\", padding: \"1rem\" }}>\r\n          Submit\r\n        </button>\r\n        <span\r\n          id=\"userNotFound\"\r\n          style={{ marginLeft: \"1rem\", fontStyle: \"italic\" }}\r\n        ></span>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\nexport default UserVerification;\r\n","import React from \"react\";\nimport RankingList from \"./components/RankingList\";\nimport UserVerification from \"./components/UserVerification\";\nimport { Route, Redirect } from \"react-router-dom\";\n\nconst validUser = localStorage.getItem(\"validUser\");\n\nfunction App() {\n  return (\n    <>\n      <Route exact path=\"/\">\n        {validUser ? <Redirect to=\"/ranking\" /> : <UserVerification />}\n      </Route>\n      <Route exact path=\"/ranking\">\n        <RankingList />\n      </Route>\n    </>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}